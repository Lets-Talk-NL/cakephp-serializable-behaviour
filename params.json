{"name":"Serializable Behaviour for CakePHP","tagline":"Saving and reading serialized data from/into db","body":"## API Documentation\r\n\r\nCheck out [Serializable Behavior API Documentation](http://imsamurai.github.io/cakephp-serializable-behaviour/docs/master/)\r\n\r\n## Abstract\r\n\r\n[![Build Status](https://travis-ci.org/imsamurai/cakephp-serializable-behaviour.png)](https://travis-ci.org/imsamurai/cakephp-serializable-behaviour) [![Coverage Status](https://coveralls.io/repos/imsamurai/cakephp-serializable-behaviour/badge.png?branch=master)](https://coveralls.io/r/imsamurai/cakephp-serializable-behaviour?branch=master) [![Latest Stable Version](https://poser.pugx.org/imsamurai/cakephp-serializable-behaviour/v/stable.png)](https://packagist.org/packages/imsamurai/cakephp-serializable-behaviour) [![Total Downloads](https://poser.pugx.org/imsamurai/cakephp-serializable-behaviour/downloads.png)](https://packagist.org/packages/imsamurai/cakephp-serializable-behaviour) [![Latest Unstable Version](https://poser.pugx.org/imsamurai/cakephp-serializable-behaviour/v/unstable.png)](https://packagist.org/packages/imsamurai/cakephp-serializable-behaviour) [![License](https://poser.pugx.org/imsamurai/cakephp-serializable-behaviour/license.png)](https://packagist.org/packages/imsamurai/cakephp-serializable-behaviour)\r\n\r\nSerializable Behaviour for CakePHP 2.1+\r\n\r\nUse it if you want to save and read serialized data into db.\r\n\r\n## Installation\r\n\r\n\tcd my_cake_app/app\r\n\tgit clone git://github.com/imsamurai/cakephp-serializable-behaviour.git Plugin/Serializable\r\n\r\nor if you use git add as submodule:\r\n\r\n\tcd my_cake_app\r\n\tgit submodule add \"git://github.com/imsamurai/cakephp-serializable-behaviour.git\" \"app/Plugin/Serializable\"\r\n\r\nthen add plugin loading in Config/bootstrap.php\r\n\r\n\tCakePlugin::load('Serializable');\r\n\r\n## Configuration\r\n\r\nWrite global config if you need to use custom serialization function:\r\n\r\n\tConfigure::write('Serializable', array(\r\n\t  'serialize' => <valid callable>,\r\n\t  'unserialize' => <valid callable>\r\n\t));\r\n\r\nAttach behaviour to model:\r\n\r\n\tpublic $actsAs = array(\r\n\t      'Serializable.Serializable' => array(\r\n\t        'fields' => <array of field names>,\r\n\t        'serialize' => <valid callable>, // optional\r\n\t        'unserialize' => <valid callable> // optional\r\n\t      )\r\n\t);\r\n\r\nBy default serialization uses function `serialize`, unserialization - `unserialize`\r\n\r\n## Advanced usage\r\n\r\nIf you want to use serialization with Containable behaviour you must modify your AppModel.\r\nFor example we have 3 models that extedned AppModel:\r\nNewsPopular has many NewsPopularItem\r\nNewsPopularItem belongs to Article\r\n\r\nNewsPopularItem and Article has some serialized fields.\r\n\r\nAssume you want to fetch data this way:\r\n\r\n\t$this->NewsPopular->contain(array(\r\n\t\t\t'NewsPopularItem' => array(\r\n\t\t\t\t'Article'\r\n\t\t\t)\r\n\t\t));\r\n\t$data = $this->NewsPopular->find('first');\r\n\r\nIn this case you must add some configuration to AppModel::afterFind. In basic case there must be:\r\n\r\n\tpublic function afterFind($results, $primary = false) {\r\n\t\tif (!$primary && $this->Behaviors->enabled('Serializable')) {\r\n\t\t\treturn $this->Behaviors->Serializable->afterFind($this, $results, $primary);\r\n\t\t}\r\n\t\treturn parent::afterFind($results, $primary);\r\n\t}\r\n\r\nAnd that's all! Now you have data structure with unserialized fields. ","google":"UA-54309823-1","note":"Don't delete this file! It's used internally to help with page regeneration."}